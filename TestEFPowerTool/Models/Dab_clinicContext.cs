// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace TestEFPowerTool.Models;

public partial class Dab_clinicContext : DbContext
{
    public Dab_clinicContext(DbContextOptions<Dab_clinicContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Account> Accounts { get; set; }

    public virtual DbSet<Appointment> Appointments { get; set; }

    public virtual DbSet<BookedService> BookedServices { get; set; }

    public virtual DbSet<Clinic> Clinics { get; set; }

    public virtual DbSet<ClinicService> ClinicServices { get; set; }

    public virtual DbSet<ClinicSlot> ClinicSlots { get; set; }

    public virtual DbSet<ServiceCategory> ServiceCategories { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Account>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Account__3213E83FD75B19A6");

            entity.Property(e => e.Active).HasDefaultValue(true);
            entity.Property(e => e.CreationTime).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.Role).HasDefaultValue(1);
        });

        modelBuilder.Entity<Appointment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Appointm__3213E83F032BEE56");

            entity.Property(e => e.AppointmentStatus).HasDefaultValue(1);
            entity.Property(e => e.AppointmentType).HasDefaultValue(1);
            entity.Property(e => e.DentistNote).HasDefaultValue("");

            entity.HasOne(d => d.Customer).WithMany(p => p.AppointmentCustomers)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Appointme__custo__4316F928");

            entity.HasOne(d => d.Dentist).WithMany(p => p.AppointmentDentists)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Appointme__denti__440B1D61");

            entity.HasOne(d => d.Slot).WithMany(p => p.Appointments)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Appointme__slot___44FF419A");
        });

        modelBuilder.Entity<BookedService>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__BookedSe__3213E83F1A661ADF");

            entity.HasOne(d => d.Appointment).WithMany(p => p.BookedServices)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__BookedSer__appoi__4222D4EF");

            entity.HasOne(d => d.Service).WithMany(p => p.BookedServices)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__BookedSer__servi__412EB0B6");
        });

        modelBuilder.Entity<Clinic>(entity =>
        {
            entity.HasKey(e => e.ClinicId).HasName("PK__Clinic__A0C8D19BD5216DA7");

            entity.Property(e => e.ClinicStatus).HasDefaultValue(1);
            entity.Property(e => e.Description).HasDefaultValue("");
            entity.Property(e => e.Working).HasDefaultValue(true);
        });

        modelBuilder.Entity<ClinicService>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ClinicSe__3213E83F394F1E02");

            entity.Property(e => e.Available).HasDefaultValue(true);
            entity.Property(e => e.Weekday).HasDefaultValue((byte)127);

            entity.HasOne(d => d.Category).WithMany(p => p.ClinicServices)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ClinicSer__categ__403A8C7D");
        });

        modelBuilder.Entity<ClinicSlot>(entity =>
        {
            entity.HasKey(e => e.SlotId).HasName("PK__ClinicSl__971A01BB111E1857");

            entity.Property(e => e.Status).HasDefaultValue(true);
        });

        modelBuilder.Entity<ServiceCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ServiceC__3213E83F1D5AD949");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}